Index: generic_fns/palmer.py
===================================================================
--- generic_fns/palmer.py	(revision 2544)
+++ generic_fns/palmer.py	(working copy)
@@ -21,11 +21,17 @@
 ###############################################################################
 
 from math import pi
-from os import F_OK, P_WAIT, access, chdir, chmod, getcwd, listdir, remove, spawnlp, system
+from os import F_OK, P_WAIT, access, chdir, chmod, getcwd, listdir, remove, system
 from re import match, search
 from string import split
 
+# UNIX only functions from the os module (Modelfree4 only runs under UNIX anyway).
+try:
+    from os import spawnlp
+except ImportError:
+    pass
 
+
 class Palmer:
     def __init__(self, relax):
         """Class used to create and process input and output for the program Modelfree 4."""
Index: docs/latex/infrastruct.tex
===================================================================
--- docs/latex/infrastruct.tex	(revision 2544)
+++ docs/latex/infrastruct.tex	(working copy)
@@ -60,12 +60,12 @@
 relax's source code is kept within a version control system called Subversion\index{Subversion|textbf} (\href{http://subversion.tigris.org/}{http://subversion.tigris.org/}).  Subversion or SVN\index{SVN|textbf} allows fine control over the development of the program.  The repository contains all information about every change ever made to the program.  To learn more about the system the Subversion book\index{Subversion!book} located at \href{http://svnbook.red-bean.com/}{http://svnbook.red-bean.com/} is a good place to start.  The contents of the relax repository can be viewed on-line at \href{http://svn.gna.org/viewcvs/relax/}{http://svn.gna.org/viewcvs/relax/}.  The current sources, assuming that the most recent minor version number is 1.2, can be downloaded using the SVN protocol by typing
 
 \example{\$ svn co svn://svn.gna.org/svn/relax/1.2 relax}
-index{Subversion!check out}
+\index{Subversion!check out}
 
 however if this does not work, try the command
 
 \example{\$ svn co http://svn.gna.org/svn/relax/1.2 relax}
-index{Subversion!check out}
+\index{Subversion!check out}
 
 to download using the HTTP protocol.  The entire relax repository is backed up daily to \href{http://svn.gna.org/daily/relax.dump.gz}{http://svn.gna.org/daily/relax.dump.gz}\index{repository!back up}.
 
@@ -90,12 +90,12 @@
 The relax distribution archives, the files to download to install relax, can be found at \href{http://download.gna.org/relax/}{http://download.gna.org/relax/}.  If a compiled binary distribution for your architecture does not exist you are welcome to create this distribution yourself and submit it for inclusion in the relax project.  To do this a number of steps are required.  Firstly, the code to each relax release or version resides in the `tags' directory of the relax repository.  To check out version 1.2.0 for example type
 
 \example{\$ svn co svn://svn.gna.org/svn/relax/tags/1.2.0 relax}
-index{Subversion!check out}
+\index{Subversion!check out}
 
 Again the sources are available through HTTP by typing
 
 \example{\$ svn co http://svn.gna.org/svn/relax/tags/1.2.0 relax}
-index{Subversion!check out}
+\index{Subversion!check out}
 
 The binary distribution can then be created for your architecture by shifting to the main directory of the checked out sources and typing
 
Index: processes.py
===================================================================
--- processes.py	(revision 2544)
+++ processes.py	(working copy)
@@ -20,10 +20,18 @@
 #                                                                             #
 ###############################################################################
 
-from os import kill, popen3, system
+from os import popen3, system
 from popen2 import Popen3
 
+# UNIX only module.
+try:
+    from os import kill
+    kill_module = 1
+except ImportError:
+    kill_module = 0
 
+
+
 class RelaxPopen3(Popen3):
     def __init__(self, cmd, capturestderr=0, bufsize=-1):
         """Extended Popen3 class."""
@@ -40,10 +48,11 @@
             return
 
         # Kill the child process (or pass silently if the PID no longer exists).
-        try:
-            kill(self.pid, sig)
-        except:
-            pass
+        if kill_module:
+            try:
+                kill(self.pid, sig)
+            except:
+                pass
 
         # Kill the relax process spawned by the thread.
         if hasattr(self, 'relax_pid') and self.relax_pid != None:
Index: sconstruct
===================================================================
--- sconstruct	(revision 2544)
+++ sconstruct	(working copy)
@@ -28,7 +28,7 @@
 # Import statements.
 from glob import glob
 import platform
-from os import F_OK, access, chdir, getcwd, lstat, path, remove, rmdir, sep, symlink, system, walk
+from os import F_OK, access, chdir, getcwd, path, remove, rmdir, sep, system, walk
 from re import search
 from shutil import copytree, move
 import sys
@@ -36,7 +36,14 @@
 
 from version import version
 
+# UNIX only functions from the os module.
+try:
+    from os import lstat, symlink
+except ImportError:
+    pass
 
+
+
 class Main:
     def __init__(self):
         """Initialise the main building targets."""
